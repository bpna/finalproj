





        DESIGN DOCUMENT
        4-5-2019

        Patrick Kinsella


        .json provides an encapsulation of the data.

        {
            "title": "<title>",
            "author": "<author>",
            "time": {
                "day": int,
                "month": int,
                "year": int









{{ %if title title>",













































I don't know when below was written. But it was written before what's above.




db stores 2 tables

    



        ------------------------------------
        |           writers                |
        ------------------------------------
        |   runtime key       integer      |
        ------------------------------------
        |   name              varchar(64)  |
        |   email             varchar(120) |
        |   password_hash     varchar(128) |
        ____________________________________

    runtime key is separate from other fields because
    it is a primary key.

    
        ---------------------------------------
        |            entries                   |
        ----------------------------------------
        |   name               varchar(140)    |
        ----------------------------------------
        |   speech             table           |
        |   time               datetime        |
        |   body               varchar(1-1000) |
        |   author             integer         |
        ----------------------------------------






Let's first examine the runtime key and author. These are represented as integers
since users of this system access it by cryptographic key.

So, the runtime key is the encrypted datetime signature, the author some public
key that can verify entries from this writer. In database terms, the author is
a foreign key for the writers runtime key.

Because of this, writers may (or may not) sign their entries. A signature
gives public knowledge of the stream of thought. Technically, this is
implemented as a private-key signature, by which the corresponding public key
is used to verify the author is who they say they are.

Next, we should discuss the speech table.

In it is an entry of all the speech content of a user. That speech content is
preprocessed into a balanced Interval Tree I.

    | v1.0 will not have balancing capability, as it will not be deployed
    | on a wide enough userbase for this to effect performance

I is indexed by time. Entries are expanding parts of this overall entry.

Each node represents a thought. You the user cut those off.

So this file, presently, represents this abstraction. Just with painful hurdles
to its creation, management, and safeguard.

We need to know the time at start, and the time at end.

What is the end an entry button?

Dedicated button ends the file, beginning of typing is the creation of a new one.
All entries may be combined to their neighbors later.

Queries are presented as... you guessed it... intervals of time.

Of course the text may also be queried as-is. This reveals a key aspect of the
anonymous owner design. It means that a user may post publicly in a name not tied
to themselves, yet providing a stream of information under an identified handle.

Streams of information could be anything.

For example, this machine should be able to do things with other add-ins 
with python. For example, it could leverage the speech-to-text framework in 
Google Cloud.



















In userspace, this presents itself as a very clear option that is available to
the user. GO PUBLIC?



    THERE IS NO TURNING BACK

    The information in this catalog is available for public consumption.

    Here are the terms of this agreement:

        1. What was said will be available to all marked recipients from
           the present to
